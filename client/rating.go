// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "db": rating Resource Client
//
// Command:
// $ goagen
// --design=github.com/freddygv/cassandra-wannabe/design
// --out=$(GOPATH)/src/github.com/freddygv/cassandra-wannabe
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// DeleteRatingPath computes a request path to the delete action of rating.
func DeleteRatingPath(movieID int, userID int) string {
	param0 := strconv.Itoa(movieID)
	param1 := strconv.Itoa(userID)

	return fmt.Sprintf("/db/v1/%s/%s", param0, param1)
}

// Delete rating record
func (c *Client) DeleteRating(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteRatingRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteRatingRequest create the request corresponding to the delete action endpoint of the rating resource.
func (c *Client) NewDeleteRatingRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ReadRatingPath computes a request path to the read action of rating.
func ReadRatingPath(movieID int, userID int) string {
	param0 := strconv.Itoa(movieID)
	param1 := strconv.Itoa(userID)

	return fmt.Sprintf("/db/v1/%s/%s", param0, param1)
}

// Retrieves a rating record
func (c *Client) ReadRating(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewReadRatingRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewReadRatingRequest create the request corresponding to the read action endpoint of the rating resource.
func (c *Client) NewReadRatingRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpsertRatingPath computes a request path to the upsert action of rating.
func UpsertRatingPath() string {

	return fmt.Sprintf("/db/v1/")
}

// Adds a rating record
func (c *Client) UpsertRating(ctx context.Context, path string, payload *RatingPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpsertRatingRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpsertRatingRequest create the request corresponding to the upsert action endpoint of the rating resource.
func (c *Client) NewUpsertRatingRequest(ctx context.Context, path string, payload *RatingPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
