// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "db": Application User Types
//
// Command:
// $ goagen
// --design=github.com/freddygv/cassandra-wannabe/api/design
// --out=$(GOPATH)/src/github.com/freddygv/cassandra-wannabe
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
)

// ratingPayload user type.
type ratingPayload struct {
	MovieID *int     `form:"movieId,omitempty" json:"movieId,omitempty" xml:"movieId,omitempty"`
	Rating  *float64 `form:"rating,omitempty" json:"rating,omitempty" xml:"rating,omitempty"`
	UserID  *int     `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the ratingPayload type instance.
func (ut *ratingPayload) Validate() (err error) {
	if ut.MovieID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "movieId"))
	}
	if ut.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "userId"))
	}
	if ut.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "rating"))
	}
	if ut.MovieID != nil {
		if *ut.MovieID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.movieId`, *ut.MovieID, 1, true))
		}
	}
	if ut.Rating != nil {
		if *ut.Rating < 0.500000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.rating`, *ut.Rating, 0.500000, true))
		}
	}
	if ut.Rating != nil {
		if *ut.Rating > 5.000000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.rating`, *ut.Rating, 5.000000, false))
		}
	}
	if ut.UserID != nil {
		if *ut.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.userId`, *ut.UserID, 1, true))
		}
	}
	return
}

// Publicize creates RatingPayload from ratingPayload
func (ut *ratingPayload) Publicize() *RatingPayload {
	var pub RatingPayload
	if ut.MovieID != nil {
		pub.MovieID = *ut.MovieID
	}
	if ut.Rating != nil {
		pub.Rating = *ut.Rating
	}
	if ut.UserID != nil {
		pub.UserID = *ut.UserID
	}
	return &pub
}

// RatingPayload user type.
type RatingPayload struct {
	MovieID int     `form:"movieId" json:"movieId" xml:"movieId"`
	Rating  float64 `form:"rating" json:"rating" xml:"rating"`
	UserID  int     `form:"userId" json:"userId" xml:"userId"`
}

// Validate validates the RatingPayload type instance.
func (ut *RatingPayload) Validate() (err error) {

	if ut.MovieID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`type.movieId`, ut.MovieID, 1, true))
	}
	if ut.Rating < 0.500000 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`type.rating`, ut.Rating, 0.500000, true))
	}
	if ut.Rating > 5.000000 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`type.rating`, ut.Rating, 5.000000, false))
	}
	if ut.UserID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`type.userId`, ut.UserID, 1, true))
	}
	return
}
