// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "db": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/freddygv/cassandra-wannabe/design
// --out=$(GOPATH)/src/github.com/freddygv/cassandra-wannabe
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// HealthHealthContext provides the health health action context.
type HealthHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHealthHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller health action.
func NewHealthHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*HealthHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HealthHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthHealthContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// DeleteRatingContext provides the rating delete action context.
type DeleteRatingContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MovieID int
	UserID  int
}

// NewDeleteRatingContext parses the incoming request URL and body, performs validations and creates the
// context used by the rating controller delete action.
func NewDeleteRatingContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteRatingContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteRatingContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMovieID := req.Params["movieId"]
	if len(paramMovieID) > 0 {
		rawMovieID := paramMovieID[0]
		if movieID, err2 := strconv.Atoi(rawMovieID); err2 == nil {
			rctx.MovieID = movieID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("movieId", rawMovieID, "integer"))
		}
	}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// Accepted sends a HTTP response with status code 202.
func (ctx *DeleteRatingContext) Accepted() error {
	ctx.ResponseData.WriteHeader(202)
	return nil
}

// ReadRatingContext provides the rating read action context.
type ReadRatingContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MovieID int
	UserID  int
}

// NewReadRatingContext parses the incoming request URL and body, performs validations and creates the
// context used by the rating controller read action.
func NewReadRatingContext(ctx context.Context, r *http.Request, service *goa.Service) (*ReadRatingContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ReadRatingContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMovieID := req.Params["movieId"]
	if len(paramMovieID) > 0 {
		rawMovieID := paramMovieID[0]
		if movieID, err2 := strconv.Atoi(rawMovieID); err2 == nil {
			rctx.MovieID = movieID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("movieId", rawMovieID, "integer"))
		}
	}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ReadRatingContext) OK(r *Rating) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/cassandra.wannabe.rating+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// UpsertRatingContext provides the rating upsert action context.
type UpsertRatingContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *RatingPayload
}

// NewUpsertRatingContext parses the incoming request URL and body, performs validations and creates the
// context used by the rating controller upsert action.
func NewUpsertRatingContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpsertRatingContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpsertRatingContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpsertRatingContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}
