// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/crud/crud_service.proto

/*
Package crud is a generated protocol buffer package.

It is generated from these files:
	pb/crud/crud_service.proto

It has these top-level messages:
	Key
	Record
	UpsertResponse
	DeleteResponse
*/
package crud

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Key struct {
	MovieID int32 `protobuf:"varint,1,opt,name=movieID" json:"movieID,omitempty"`
	UserID  int32 `protobuf:"varint,2,opt,name=userID" json:"userID,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Key) GetMovieID() int32 {
	if m != nil {
		return m.MovieID
	}
	return 0
}

func (m *Key) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type Record struct {
	MovieID int32   `protobuf:"varint,1,opt,name=movieID" json:"movieID,omitempty"`
	UserID  int32   `protobuf:"varint,2,opt,name=userID" json:"userID,omitempty"`
	Rating  float32 `protobuf:"fixed32,3,opt,name=rating" json:"rating,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Record) GetMovieID() int32 {
	if m != nil {
		return m.MovieID
	}
	return 0
}

func (m *Record) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *Record) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

type UpsertResponse struct {
}

func (m *UpsertResponse) Reset()                    { *m = UpsertResponse{} }
func (m *UpsertResponse) String() string            { return proto.CompactTextString(m) }
func (*UpsertResponse) ProtoMessage()               {}
func (*UpsertResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Key)(nil), "crud.Key")
	proto.RegisterType((*Record)(nil), "crud.Record")
	proto.RegisterType((*UpsertResponse)(nil), "crud.UpsertResponse")
	proto.RegisterType((*DeleteResponse)(nil), "crud.DeleteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CRUDService service

type CRUDServiceClient interface {
	Upsert(ctx context.Context, in *Record, opts ...grpc.CallOption) (*UpsertResponse, error)
	Read(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Record, error)
	Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type cRUDServiceClient struct {
	cc *grpc.ClientConn
}

func NewCRUDServiceClient(cc *grpc.ClientConn) CRUDServiceClient {
	return &cRUDServiceClient{cc}
}

func (c *cRUDServiceClient) Upsert(ctx context.Context, in *Record, opts ...grpc.CallOption) (*UpsertResponse, error) {
	out := new(UpsertResponse)
	err := grpc.Invoke(ctx, "/crud.CRUDService/Upsert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDServiceClient) Read(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := grpc.Invoke(ctx, "/crud.CRUDService/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDServiceClient) Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/crud.CRUDService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CRUDService service

type CRUDServiceServer interface {
	Upsert(context.Context, *Record) (*UpsertResponse, error)
	Read(context.Context, *Key) (*Record, error)
	Delete(context.Context, *Key) (*DeleteResponse, error)
}

func RegisterCRUDServiceServer(s *grpc.Server, srv CRUDServiceServer) {
	s.RegisterService(&_CRUDService_serviceDesc, srv)
}

func _CRUDService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CRUDService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServiceServer).Upsert(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUDService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CRUDService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServiceServer).Read(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUDService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CRUDService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServiceServer).Delete(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

var _CRUDService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crud.CRUDService",
	HandlerType: (*CRUDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _CRUDService_Upsert_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _CRUDService_Read_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CRUDService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/crud/crud_service.proto",
}

func init() { proto.RegisterFile("pb/crud/crud_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xdb, 0x6d, 0x56, 0x7c, 0x8a, 0x48, 0x10, 0x29, 0x3d, 0xcd, 0x9e, 0x06, 0xb2, 0x04,
	0xf4, 0xe0, 0x5d, 0x7b, 0x19, 0xbb, 0x45, 0x76, 0xf1, 0x22, 0x69, 0xf2, 0xac, 0x05, 0x97, 0x94,
	0x24, 0xad, 0xf4, 0x8f, 0xf0, 0x7f, 0x96, 0x36, 0x1d, 0x38, 0x6f, 0x5e, 0x02, 0xdf, 0xef, 0xe5,
	0x7b, 0x79, 0x5f, 0x1e, 0x64, 0x4d, 0xc9, 0xa4, 0x6d, 0xd5, 0x78, 0xbc, 0x39, 0xb4, 0x5d, 0x2d,
	0x91, 0x36, 0xd6, 0x78, 0x43, 0x16, 0x03, 0xcb, 0x1f, 0x61, 0xbe, 0xc5, 0x9e, 0xa4, 0x70, 0xba,
	0x37, 0x5d, 0x8d, 0x9b, 0x22, 0x8d, 0x97, 0xf1, 0xea, 0x84, 0x1f, 0x24, 0xb9, 0x81, 0xa4, 0x75,
	0x68, 0x37, 0x45, 0x3a, 0x1b, 0x0b, 0x93, 0xca, 0x39, 0x24, 0x1c, 0xa5, 0xb1, 0xea, 0xff, 0xde,
	0x81, 0x5b, 0xe1, 0x6b, 0x5d, 0xa5, 0xf3, 0x65, 0xbc, 0x9a, 0xf1, 0x49, 0xe5, 0x57, 0x70, 0xb9,
	0x6b, 0x1c, 0x5a, 0xcf, 0xd1, 0x35, 0x46, 0x3b, 0x1c, 0x48, 0x81, 0x9f, 0xe8, 0xf1, 0x40, 0xee,
	0xbf, 0x63, 0x38, 0x7f, 0xe6, 0xbb, 0xe2, 0x25, 0x84, 0x21, 0x14, 0x92, 0xe0, 0x21, 0x17, 0x74,
	0x48, 0x44, 0xc3, 0x54, 0xd9, 0x75, 0x50, 0x7f, 0xfa, 0x45, 0xe4, 0x16, 0x16, 0x1c, 0x85, 0x22,
	0x67, 0xa1, 0xbe, 0xc5, 0x3e, 0x3b, 0x32, 0xe6, 0x11, 0xb9, 0x83, 0x24, 0x3c, 0xfa, 0xfb, 0xd2,
	0xd4, 0xef, 0x78, 0x9a, 0x3c, 0x7a, 0x62, 0xaf, 0xeb, 0xaa, 0xf6, 0x1f, 0x6d, 0x49, 0xa5, 0xd9,
	0xb3, 0x77, 0x8b, 0x4a, 0xf5, 0x55, 0xc7, 0xa4, 0x70, 0x4e, 0x68, 0x65, 0xc5, 0xfa, 0x4b, 0x68,
	0x2d, 0x4a, 0x64, 0xd3, 0x2a, 0xca, 0x64, 0xfc, 0xfe, 0x87, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x8d, 0x4c, 0xd6, 0x74, 0x9c, 0x01, 0x00, 0x00,
}
